// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Voted extends ethereum.Event {
  get params(): Voted__Params {
    return new Voted__Params(this);
  }
}

export class Voted__Params {
  _event: Voted;

  constructor(event: Voted) {
    this._event = event;
  }

  get description(): string {
    return this._event.parameters[0].value.toString();
  }

  get _startVotingTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _endVotingTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Vote__getAllProposalsResultValue0Struct extends ethereum.Tuple {
  get description(): string {
    return this[0].toString();
  }

  get voteCount(): BigInt {
    return this[1].toBigInt();
  }
}

export class Vote__getProposalResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Vote__proposalsResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDescription(): string {
    return this.value0;
  }

  getVoteCount(): BigInt {
    return this.value1;
  }
}

export class Vote extends ethereum.SmartContract {
  static bind(address: Address): Vote {
    return new Vote("Vote", address);
  }

  anonAadhaarVerifierAddr(): Address {
    let result = super.call(
      "anonAadhaarVerifierAddr",
      "anonAadhaarVerifierAddr():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_anonAadhaarVerifierAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "anonAadhaarVerifierAddr",
      "anonAadhaarVerifierAddr():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canPeopleVote(): boolean {
    let result = super.call("canPeopleVote", "canPeopleVote():(bool)", []);

    return result[0].toBoolean();
  }

  try_canPeopleVote(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canPeopleVote", "canPeopleVote():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkVoted(_addr: Address): boolean {
    let result = super.call("checkVoted", "checkVoted(address):(bool)", [
      ethereum.Value.fromAddress(_addr)
    ]);

    return result[0].toBoolean();
  }

  try_checkVoted(_addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("checkVoted", "checkVoted(address):(bool)", [
      ethereum.Value.fromAddress(_addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAllProposals(): Array<Vote__getAllProposalsResultValue0Struct> {
    let result = super.call(
      "getAllProposals",
      "getAllProposals():((string,uint256)[])",
      []
    );

    return result[0].toTupleArray<Vote__getAllProposalsResultValue0Struct>();
  }

  try_getAllProposals(): ethereum.CallResult<
    Array<Vote__getAllProposalsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllProposals",
      "getAllProposals():((string,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Vote__getAllProposalsResultValue0Struct>()
    );
  }

  getProposal(proposalIndex: BigInt): Vote__getProposalResult {
    let result = super.call(
      "getProposal",
      "getProposal(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalIndex)]
    );

    return new Vote__getProposalResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_getProposal(
    proposalIndex: BigInt
  ): ethereum.CallResult<Vote__getProposalResult> {
    let result = super.tryCall(
      "getProposal",
      "getProposal(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vote__getProposalResult(value[0].toString(), value[1].toBigInt())
    );
  }

  getProposalCount(): BigInt {
    let result = super.call(
      "getProposalCount",
      "getProposalCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProposalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalCount",
      "getProposalCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalVotes(): BigInt {
    let result = super.call("getTotalVotes", "getTotalVotes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalVotes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalVotes",
      "getTotalVotes():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasVoted(param0: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposals(param0: BigInt): Vote__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Vote__proposalsResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_proposals(param0: BigInt): ethereum.CallResult<Vote__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vote__proposalsResult(value[0].toString(), value[1].toBigInt())
    );
  }

  verify(
    _pA: Array<BigInt>,
    _pB: Array<Array<BigInt>>,
    _pC: Array<BigInt>,
    _pubSignals: Array<BigInt>
  ): boolean {
    let result = super.call(
      "verify",
      "verify(uint256[2],uint256[2][2],uint256[2],uint256[34]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pA),
        ethereum.Value.fromUnsignedBigIntMatrix(_pB),
        ethereum.Value.fromUnsignedBigIntArray(_pC),
        ethereum.Value.fromUnsignedBigIntArray(_pubSignals)
      ]
    );

    return result[0].toBoolean();
  }

  try_verify(
    _pA: Array<BigInt>,
    _pB: Array<Array<BigInt>>,
    _pC: Array<BigInt>,
    _pubSignals: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify(uint256[2],uint256[2][2],uint256[2],uint256[34]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pA),
        ethereum.Value.fromUnsignedBigIntMatrix(_pB),
        ethereum.Value.fromUnsignedBigIntArray(_pC),
        ethereum.Value.fromUnsignedBigIntArray(_pubSignals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  votingQuestion(): string {
    let result = super.call("votingQuestion", "votingQuestion():(string)", []);

    return result[0].toString();
  }

  try_votingQuestion(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "votingQuestion",
      "votingQuestion():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  votingStartTime(): BigInt {
    let result = super.call(
      "votingStartTime",
      "votingStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_votingStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingStartTime",
      "votingStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingTimeRange(): BigInt {
    let result = super.call(
      "votingTimeRange",
      "votingTimeRange():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_votingTimeRange(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingTimeRange",
      "votingTimeRange():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _votingQuestion(): string {
    return this._call.inputValues[0].value.toString();
  }

  get proposalDescriptions(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _verifierAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeProposalDescriptionCall extends ethereum.Call {
  get inputs(): ChangeProposalDescriptionCall__Inputs {
    return new ChangeProposalDescriptionCall__Inputs(this);
  }

  get outputs(): ChangeProposalDescriptionCall__Outputs {
    return new ChangeProposalDescriptionCall__Outputs(this);
  }
}

export class ChangeProposalDescriptionCall__Inputs {
  _call: ChangeProposalDescriptionCall;

  constructor(call: ChangeProposalDescriptionCall) {
    this._call = call;
  }

  get _newProposalDescriptions(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }
}

export class ChangeProposalDescriptionCall__Outputs {
  _call: ChangeProposalDescriptionCall;

  constructor(call: ChangeProposalDescriptionCall) {
    this._call = call;
  }
}

export class ChangeVotingQuestionCall extends ethereum.Call {
  get inputs(): ChangeVotingQuestionCall__Inputs {
    return new ChangeVotingQuestionCall__Inputs(this);
  }

  get outputs(): ChangeVotingQuestionCall__Outputs {
    return new ChangeVotingQuestionCall__Outputs(this);
  }
}

export class ChangeVotingQuestionCall__Inputs {
  _call: ChangeVotingQuestionCall;

  constructor(call: ChangeVotingQuestionCall) {
    this._call = call;
  }

  get _votingQuestion(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ChangeVotingQuestionCall__Outputs {
  _call: ChangeVotingQuestionCall;

  constructor(call: ChangeVotingQuestionCall) {
    this._call = call;
  }
}

export class SetVotingTimeRangeCall extends ethereum.Call {
  get inputs(): SetVotingTimeRangeCall__Inputs {
    return new SetVotingTimeRangeCall__Inputs(this);
  }

  get outputs(): SetVotingTimeRangeCall__Outputs {
    return new SetVotingTimeRangeCall__Outputs(this);
  }
}

export class SetVotingTimeRangeCall__Inputs {
  _call: SetVotingTimeRangeCall;

  constructor(call: SetVotingTimeRangeCall) {
    this._call = call;
  }

  get _votingTimeRange(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingTimeRangeCall__Outputs {
  _call: SetVotingTimeRangeCall;

  constructor(call: SetVotingTimeRangeCall) {
    this._call = call;
  }
}

export class StartVotingCall extends ethereum.Call {
  get inputs(): StartVotingCall__Inputs {
    return new StartVotingCall__Inputs(this);
  }

  get outputs(): StartVotingCall__Outputs {
    return new StartVotingCall__Outputs(this);
  }
}

export class StartVotingCall__Inputs {
  _call: StartVotingCall;

  constructor(call: StartVotingCall) {
    this._call = call;
  }

  get _votingTimeRange(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartVotingCall__Outputs {
  _call: StartVotingCall;

  constructor(call: StartVotingCall) {
    this._call = call;
  }
}

export class VoteForProposalCall extends ethereum.Call {
  get inputs(): VoteForProposalCall__Inputs {
    return new VoteForProposalCall__Inputs(this);
  }

  get outputs(): VoteForProposalCall__Outputs {
    return new VoteForProposalCall__Outputs(this);
  }
}

export class VoteForProposalCall__Inputs {
  _call: VoteForProposalCall;

  constructor(call: VoteForProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pA(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _pB(): Array<Array<BigInt>> {
    return this._call.inputValues[2].value.toBigIntMatrix();
  }

  get _pC(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _pubSignals(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class VoteForProposalCall__Outputs {
  _call: VoteForProposalCall;

  constructor(call: VoteForProposalCall) {
    this._call = call;
  }
}
